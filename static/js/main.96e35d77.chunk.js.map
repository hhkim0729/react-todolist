{"version":3,"sources":["AddForm.js","Todo.js","TodoList.js","index.js"],"names":["AddForm","memo","addTodo","useState","value","setValue","input","useRef","useEffect","current","focus","className","ref","onChange","e","target","type","onClick","Todo","id","todo","isChecked","deleteTodo","updateTodo","toggleCheck","isUpdate","setIsUpdate","onSubmit","preventDefault","onBlur","onKeyUp","key","TodoList","todoList","setTodoList","setId","isMount","localStorage","setItem","JSON","stringify","localTodoList","getItem","parse","localId","parseInt","useCallback","console","log","prevTodoList","prevId","index","findIndex","todoInfo","newTodoList","splice","filter","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96e35d77.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, memo } from 'react';\r\nimport './AddForm.css';\r\n\r\nconst AddForm = memo(({ addTodo }) => {\r\n  const [value, setValue] = useState('');\r\n  const input = useRef(null);\r\n\r\n  useEffect(() => {\r\n    input.current.focus();\r\n    setValue('');\r\n  }, [addTodo]);\r\n\r\n  const onChangeInput = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form className=\"add-form\">\r\n      <input ref={input} value={value} onChange={onChangeInput} />\r\n      <button type=\"submit\" onClick={addTodo(value)}>\r\n        add\r\n      </button>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default AddForm;\r\n","import React, { useState, useRef, useEffect, memo } from 'react';\r\nimport './Todo.css';\r\n\r\nconst Todo = memo(\r\n  ({ id, todo, isChecked, deleteTodo, updateTodo, toggleCheck }) => {\r\n    const [value, setValue] = useState(todo);\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n    const input = useRef(null);\r\n\r\n    useEffect(() => {\r\n      if (isUpdate) {\r\n        input.current.focus();\r\n      }\r\n    }, [isUpdate]);\r\n\r\n    useEffect(() => {\r\n      setIsUpdate(false);\r\n    }, [todo]);\r\n\r\n    const onClickTodo = () => {\r\n      setIsUpdate(true);\r\n    };\r\n\r\n    const onChangeInput = (e) => {\r\n      setValue(e.target.value);\r\n    };\r\n\r\n    const onFormSubmit = (e) => {\r\n      e.preventDefault();\r\n      setIsUpdate(false);\r\n      if (!value) {\r\n        setValue(todo);\r\n      } else {\r\n        if (todo !== value) {\r\n          updateTodo(id, value, isChecked);\r\n        }\r\n      }\r\n    };\r\n\r\n    const onBlurInput = () => {\r\n      setIsUpdate(false);\r\n    };\r\n\r\n    const onKeyUpInput = (e) => {\r\n      if (e.key === 'Escape') {\r\n        setIsUpdate(false);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <li className=\"list\">\r\n        <span className=\"check\" onClick={toggleCheck(id)}>\r\n          {isChecked ? '◼' : '◻'}\r\n        </span>\r\n        {isUpdate || (\r\n          <span\r\n            className={`todo ${isChecked ? 'checked' : ''}`}\r\n            onClick={onClickTodo}\r\n          >\r\n            {todo}\r\n          </span>\r\n        )}\r\n        {isUpdate && (\r\n          <form className=\"update-form\" onSubmit={onFormSubmit}>\r\n            <input\r\n              ref={input}\r\n              value={value}\r\n              onChange={onChangeInput}\r\n              onBlur={onBlurInput}\r\n              onKeyUp={onKeyUpInput}\r\n            />\r\n          </form>\r\n        )}\r\n        <button onClick={deleteTodo(id)}>X</button>\r\n      </li>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Todo;\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport AddForm from './AddForm';\r\nimport Todo from './Todo';\r\nimport './TodoList.css';\r\n\r\nconst TodoList = () => {\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [id, setId] = useState(0);\r\n  const isMount = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (!isMount.current) {\r\n      localStorage.setItem('todoList', JSON.stringify(todoList));\r\n      localStorage.setItem('id', id);\r\n    }\r\n  }, [todoList, id]);\r\n\r\n  useEffect(() => {\r\n    const localTodoList = localStorage.getItem('todoList');\r\n    if (localTodoList) {\r\n      setTodoList(JSON.parse(localTodoList));\r\n    }\r\n    const localId = localStorage.getItem('id');\r\n    if (localId) {\r\n      setId(parseInt(localId));\r\n    }\r\n    isMount.current = false;\r\n  }, []);\r\n\r\n  const addTodo = useCallback(\r\n    (todo) => (e) => {\r\n      console.log('add');\r\n      e.preventDefault();\r\n      if (todo) {\r\n        setTodoList((prevTodoList) => [\r\n          ...prevTodoList,\r\n          { id: id, todo: todo, isChecked: false },\r\n        ]);\r\n        setId((prevId) => prevId + 1);\r\n      }\r\n    },\r\n    [id]\r\n  );\r\n\r\n  const updateTodo = useCallback(\r\n    (id, todo, isChecked) => {\r\n      const index = todoList.findIndex((todoInfo) => todoInfo.id === id);\r\n      const newTodoList = [...todoList];\r\n      newTodoList.splice(index, 1, {\r\n        id: id,\r\n        todo: todo,\r\n        isChecked: isChecked,\r\n      });\r\n      setTodoList(newTodoList);\r\n    },\r\n    [todoList]\r\n  );\r\n\r\n  const deleteTodo = useCallback(\r\n    (id) => () => {\r\n      const newTodoList = todoList.filter((todoInfo) => todoInfo.id !== id);\r\n      setTodoList(newTodoList);\r\n    },\r\n    [todoList]\r\n  );\r\n\r\n  const toggleCheck = useCallback(\r\n    (id) => () => {\r\n      const index = todoList.findIndex((todoInfo) => todoInfo.id === id);\r\n      const newTodoList = [...todoList];\r\n      newTodoList[index].isChecked = newTodoList[index].isChecked\r\n        ? false\r\n        : true;\r\n      setTodoList(newTodoList);\r\n    },\r\n    [todoList]\r\n  );\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <div className=\"todolist-box\">\r\n        <h1>things to do</h1>\r\n        <AddForm addTodo={addTodo} />\r\n        <ul>\r\n          {todoList.map((todoInfo) => {\r\n            return (\r\n              <Todo\r\n                key={todoInfo.id}\r\n                id={todoInfo.id}\r\n                todo={todoInfo.todo}\r\n                isChecked={todoInfo.isChecked}\r\n                updateTodo={updateTodo}\r\n                deleteTodo={deleteTodo}\r\n                toggleCheck={toggleCheck}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './TodoList';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}